int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int,int>>q;
        int r = grid.size();
        int c = grid[0].size();
        int totalOrange = 0;
        for(int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if(grid[i][j]==2){
                    q.push({i,j});
                }
                if(grid[i][j]!=0){
                   totalOrange++; 
                }
            }
        }
        int dx[] = {1,-1,0,0}, dy[] = {0,0,1,-1};
        int minutes = 0, rottenOrange = 0;
        while(!q.empty()){
            int s = q.size();
            rottenOrange+=s;
            while(s--){
                pair<int,int>f = q.front();
                q.pop();
                for(int i=0;i<4;i++){
                    int cx = f.first + dx[i], cy = f.second + dy[i];
                    if(cx<0 or cx>=r or cy<0 or cy>=c or grid[cx][cy]!=1){
                        continue;
                    }
                    grid[cx][cy] = 2;
                    q.push({cx,cy});
                }
            }
            if(!q.empty())
            minutes++;
        }
        if(rottenOrange==totalOrange){
            return minutes;
        }
        return -1;
    }
