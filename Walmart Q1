double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        vector<vector<pair<int,double>>> graph(n);
        bool flag = false;
        for(int i=0; i<edges.size(); i++){
            graph[edges[i][0]].push_back({edges[i][1], succProb[i]});
            graph[edges[i][1]].push_back({edges[i][0], succProb[i]});
            if(edges[i][0]==end or edges[i][1]==end)
                flag = true;
        }
        if(!flag)
            return 0;
        vector<double>mp(n,0);
        priority_queue<pair<double,int>>pq;
        pq.push({1, start});
        while(!pq.empty()){
            double p = pq.top().first;
            int src = pq.top().second;
            pq.pop();
            for(auto nbr:graph[src]){
                int s = nbr.first;
                double prob = nbr.second;
                if(p*prob>mp[s]){
                    mp[s] = p*prob;
                    pq.push({p*prob,s});
                }
            }
        }
        return mp[end];
    }
